<a id="arabic"></a>
[English ↙](#english)

<div dir="rtl" style="text-align: right">

# Static Functions (Methods)

## مراجعة الدرس السابق

في الدرس السابق تعلمنا:
- **Static Variables:** متغيرات مشتركة لكل الـ objects
- **Shared Variables:** تعادل مفهوم Static في C++
- **Class Level:** Static members تكون على مستوى الكلاس وليس الـ object
- عندما يكون عندك 10 objects، كلهم يشاركون نفس الـ static variable

## ما هي الـ Static Functions؟

**Static Functions** هي functions مشتركة لكل الـ objects، مثل Static Variables تماماً.

**الفرق الأساسي:**
- **Regular Function:** تحتاج object لاستدعائها
- **Static Function:** يمكن استدعاؤها على مستوى الكلاس **بدون object**

## مبدأ الـ Encapsulation

تذكر المبدأ الأساسي:
- لا يمكن الوصول للـ methods إلا من خلال object
- هذا يزيد الـ security ويحمي البيانات

**لكن مع Static Functions:**
- يمكن استدعاؤها **قبل إنشاء أي object**
- هي **نعمة عظيمة** كما ذكر الأستاذ
- ستقدرون قيمتها في الدروس القادمة

## مثال أساسي من المحاضرة
</div>
<div dir="ltr">

```cpp
#include <iostream>
using namespace std;

class clsA 
{
public:

    // Static Function - يمكن استدعاؤها بدون object
    static int Function1()
    {
        return 10;
    }

    // Regular Function - تحتاج object
    int Function2()
    {
        return 20;
    }
};

int main()
{   
    // استدعاء Static Function على مستوى الكلاس - بدون object
    cout << clsA::Function1() << endl;  // يعمل بنجاح!

    // محاولة استدعاء Regular Function على مستوى الكلاس
    // cout << clsA::Function2() << endl;  // خطأ! يحتاج object

    return 0;
}
```
</div>

<div dir="rtl" style="text-align: right">

**النتيجة:**
```
10
```

**التفسير:**
- `clsA::Function1()` نجح لأنها static function
- لو جربت `clsA::Function2()` ستحصل على خطأ

## الخطأ عند استدعاء Regular Function

إذا حاولت استدعاء function عادية على مستوى الكلاس:
```cpp
cout << clsA::Function2() << endl;  // خطأ!
```

**رسالة الخطأ:**
```
member reference must be relative to a specific object
```

**المعنى:** لازم يكون عندك object لاستدعاء Function2

## استدعاء Static Functions بطرق مختلفة
</div>
<div dir="ltr">

```cpp
#include <iostream>
using namespace std;

class clsA 
{
public:

    static int Function1()
    {
        return 10;
    }

    int Function2()
    {
        return 20;
    }
};

int main()
{   
    // الطريقة الأولى: على مستوى الكلاس (بدون objects)
    cout << clsA::Function1() << endl;

    // إنشاء objects
    clsA A1, A2;

    // الطريقة الثانية: من خلال الـ objects
    cout << A1.Function1() << endl;  // نفس النتيجة
    cout << A1.Function2() << endl;  // regular function تعمل من object
    cout << A2.Function1() << endl;  // نفس النتيجة مرة أخرى

    return 0;
}
```
</div>

<div dir="rtl" style="text-align: right">

**النتيجة:**
```
10
10
20
10
```

**التفسير:**
- `clsA::Function1()`: استدعاء من الكلاس مباشرة
- `A1.Function1()`: استدعاء من object A1 
- `A1.Function2()`: regular function تعمل فقط من object
- `A2.Function1()`: استدعاء من object A2 - نفس النتيجة

## خصائص Static Functions

### 1. مستوى الاستدعاء
- **Class Level:** يمكن استدعاؤها على مستوى الكلاس
- **Object Level:** يمكن استدعاؤها من أي object أيضاً

### 2. مشاركة الكود
- **Shared Function:** نفس الـ function لكل الـ objects
- كل الـ objects تستدعي نفس الكود
- مثل Static Variables - واحدة مشتركة للجميع

### 3. عدم الحاجة لـ Object
- يمكن استدعاؤها **قبل إنشاء أي object**
- مفيدة للعمليات التي لا تعتمد على بيانات الـ object

## مثال عملي: Utility Functions
</div>
<div dir="ltr">

```cpp
#include <iostream>
#include <string>
using namespace std;

class clsMath
{
public:
    // Static Functions - لا تحتاج objects
    static int Add(int a, int b)
    {
        return a + b;
    }

    static int Multiply(int a, int b)
    {
        return a * b;
    }

    static bool IsEven(int number)
    {
        return (number % 2 == 0);
    }

    // Regular Function - تحتاج object
    void DisplayWelcome()
    {
        cout << "Welcome to Math Class!" << endl;
    }
};

int main()
{
    // استخدام Static Functions بدون إنشاء objects
    cout << "5 + 3 = " << clsMath::Add(5, 3) << endl;
    cout << "4 * 6 = " << clsMath::Multiply(4, 6) << endl;
    cout << "Is 8 even? " << clsMath::IsEven(8) << endl;

    // لاستخدام Regular Function نحتاج object
    clsMath mathObj;
    mathObj.DisplayWelcome();

    // يمكن استدعاء Static Functions من الـ object أيضاً
    cout << "7 + 2 = " << mathObj.Add(7, 2) << endl;

    return 0;
}
```
</div>

<div dir="rtl" style="text-align: right">

## متى نستخدم Static Functions؟

### 1. Utility Functions
- عمليات رياضية عامة
- functions مساعدة لا تحتاج بيانات الـ object

### 2. Factory Functions
- إنشاء objects بطرق مختلفة
- إعداد أولي للكلاس

### 3. Validation Functions
- التحقق من صحة البيانات
- functions عامة للتحقق

## مثال: إدارة الأرقام التسلسلية
</div>
<div dir="ltr">

```cpp
#include <iostream>
#include <string>
using namespace std;

class clsEmployee
{
private:
    string _name;
    int _employeeID;
    static int _nextID;  // رقم تسلسلي تلقائي

public:
    // Constructor
    clsEmployee(string name)
    {
        _name = name;
        _employeeID = _nextID++;
    }

    // Static Function - للحصول على الرقم التالي
    static int GetNextID()
    {
        return _nextID;
    }

    // Static Function - لإعادة تعيين العداد
    static void ResetIDCounter(int startFrom = 1)
    {
        _nextID = startFrom;
    }

    // Regular Function
    void DisplayInfo()
    {
        cout << "Employee ID: " << _employeeID << endl;
        cout << "Name: " << _name << endl;
        cout << "----------------" << endl;
    }
};

// Static member initialization
int clsEmployee::_nextID = 1;

int main()
{
    // استخدام Static Function قبل إنشاء أي object
    cout << "Next available ID: " << clsEmployee::GetNextID() << endl;

    clsEmployee emp1("John Smith");
    clsEmployee emp2("Sarah Johnson");

    emp1.DisplayInfo();
    emp2.DisplayInfo();

    cout << "Next available ID: " << clsEmployee::GetNextID() << endl;

    // إعادة تعيين العداد
    clsEmployee::ResetIDCounter(100);
    cout << "After reset, next ID: " << clsEmployee::GetNextID() << endl;

    return 0;
}
```
</div>

<div dir="rtl" style="text-align: right">

## الفروق المهمة

| الخاصية | Regular Function | Static Function |
|---------|------------------|-----------------|
| **الاستدعاء** | تحتاج object | لا تحتاج object |
| **الوصول** | object.function() | Class::function() |
| **المشاركة** | كل object له نسخته | واحدة مشتركة للجميع |
| **الاستخدام** | بيانات الـ object | عمليات عامة |

## قواعد مهمة

### 1. Static Functions لا تستطيع الوصول لـ Regular Members
```cpp
class clsExample
{
private:
    int _regularVar;
    static int _staticVar;

public:
    static void StaticFunction()
    {
        // _regularVar = 5;  // خطأ! لا يمكن الوصول
        _staticVar = 10;     // صحيح
    }
};
```

### 2. يمكن استدعاؤها بطريقتين
```cpp
// من الكلاس مباشرة
Class::StaticFunction();

// من الـ object
object.StaticFunction();
```

## استخدامات سحرية للـ Static Functions

كما ذكر الأستاذ، ستجدون استخدامات "سحرية" لاحقاً

## الخلاصة

**Static Functions** هي:
- **Shared functions** لكل الـ objects
- تُستدعى على مستوى الـ **Class** وليس الـ **Object**
- يمكن استدعاؤها **قبل إنشاء أي object**
- مفيدة للعمليات العامة والـ utility functions

**القواعد المهمة:**
- `ClassName::FunctionName()` للاستدعاء من الكلاس
- يمكن استدعاؤها من الـ objects أيضاً
- لا تستطيع الوصول للـ regular members

**النصيحة:** استخدمها للعمليات التي لا تحتاج بيانات محددة من الـ object

</div>

<br><br><br><br><br><br><br><br><br>

<a id="english"></a>
[العربية ↗](#arabic)

# Static Functions (Methods)

## Review of Previous Lesson

In the previous lesson we learned:
- **Static Variables:** Shared variables for all objects
- **Shared Variables:** Equivalent to Static concept in C++
- **Class Level:** Static members exist at class level, not object level
- When you have 10 objects, they all share the same static variable

## What are Static Functions?

**Static Functions** are shared functions for all objects, just like Static Variables.

**Key Difference:**
- **Regular Function:** Needs an object to be called
- **Static Function:** Can be called at class level **without objects**

## Encapsulation Principle

Remember the basic principle:
- Methods can only be accessed through objects
- This increases security and protects data

**But with Static Functions:**
- Can be called **before creating any object**
- This is a **great blessing** as the professor mentioned
- You'll appreciate their value in upcoming lessons

## Basic Example from Lecture

```cpp
#include <iostream>
using namespace std;

class clsA 
{
public:

    // Static Function - can be called without object
    static int Function1()
    {
        return 10;
    }

    // Regular Function - needs object
    int Function2()
    {
        return 20;
    }
};

int main()
{   
    // Call Static Function at class level - without object
    cout << clsA::Function1() << endl;  // Works successfully!

    // Try to call Regular Function at class level
    // cout << clsA::Function2() << endl;  // Error! Needs object

    return 0;
}
```

**Result:**
```
10
```

**Explanation:**
- `clsA::Function1()` succeeded because it's a static function
- If you try `clsA::Function2()` you'll get an error

## Error When Calling Regular Function

If you try to call a regular function at class level:
```cpp
cout << clsA::Function2() << endl;  // Error!
```

**Error Message:**
```
member reference must be relative to a specific object
```

**Meaning:** You need an object to call Function2

## Calling Static Functions in Different Ways

```cpp
#include <iostream>
using namespace std;

class clsA 
{
public:

    static int Function1()
    {
        return 10;
    }

    int Function2()
    {
        return 20;
    }
};

int main()
{   
    // First way: at class level (without objects)
    cout << clsA::Function1() << endl;

    // Create objects
    clsA A1, A2;

    // Second way: through objects
    cout << A1.Function1() << endl;  // Same result
    cout << A1.Function2() << endl;  // regular function works from object
    cout << A2.Function1() << endl;  // Same result again

    return 0;
}
```

**Result:**
```
10
10
20
10
```

**Explanation:**
- `clsA::Function1()`: Called from class directly
- `A1.Function1()`: Called from object A1 
- `A1.Function2()`: regular function works only from object
- `A2.Function1()`: Called from object A2 - same result

## Static Functions Characteristics

### 1. Calling Level
- **Class Level:** Can be called at class level
- **Object Level:** Can also be called from any object

### 2. Code Sharing
- **Shared Function:** Same function for all objects
- All objects call the same code
- Like Static Variables - one shared for everyone

### 3. No Object Required
- Can be called **before creating any object**
- Useful for operations that don't depend on object data

## Practical Example: Utility Functions

```cpp
#include <iostream>
#include <string>
using namespace std;

class clsMath
{
public:
    // Static Functions - don't need objects
    static int Add(int a, int b)
    {
        return a + b;
    }

    static int Multiply(int a, int b)
    {
        return a * b;
    }

    static bool IsEven(int number)
    {
        return (number % 2 == 0);
    }

    // Regular Function - needs object
    void DisplayWelcome()
    {
        cout << "Welcome to Math Class!" << endl;
    }
};

int main()
{
    // Using Static Functions without creating objects
    cout << "5 + 3 = " << clsMath::Add(5, 3) << endl;
    cout << "4 * 6 = " << clsMath::Multiply(4, 6) << endl;
    cout << "Is 8 even? " << clsMath::IsEven(8) << endl;

    // To use Regular Function we need an object
    clsMath mathObj;
    mathObj.DisplayWelcome();

    // Static Functions can also be called from object
    cout << "7 + 2 = " << mathObj.Add(7, 2) << endl;

    return 0;
}
```

## When to Use Static Functions?

### 1. Utility Functions
- General mathematical operations
- Helper functions that don't need object data

### 2. Factory Functions
- Creating objects in different ways
- Initial class setup

### 3. Validation Functions
- Data validation
- General verification functions

## Example: Sequential ID Management

```cpp
#include <iostream>
#include <string>
using namespace std;

class clsEmployee
{
private:
    string _name;
    int _employeeID;
    static int _nextID;  // Automatic sequential number

public:
    // Constructor
    clsEmployee(string name)
    {
        _name = name;
        _employeeID = _nextID++;
    }

    // Static Function - to get next ID
    static int GetNextID()
    {
        return _nextID;
    }

    // Static Function - to reset counter
    static void ResetIDCounter(int startFrom = 1)
    {
        _nextID = startFrom;
    }

    // Regular Function
    void DisplayInfo()
    {
        cout << "Employee ID: " << _employeeID << endl;
        cout << "Name: " << _name << endl;
        cout << "----------------" << endl;
    }
};

// Static member initialization
int clsEmployee::_nextID = 1;

int main()
{
    // Using Static Function before creating any object
    cout << "Next available ID: " << clsEmployee::GetNextID() << endl;

    clsEmployee emp1("John Smith");
    clsEmployee emp2("Sarah Johnson");

    emp1.DisplayInfo();
    emp2.DisplayInfo();

    cout << "Next available ID: " << clsEmployee::GetNextID() << endl;

    // Reset counter
    clsEmployee::ResetIDCounter(100);
    cout << "After reset, next ID: " << clsEmployee::GetNextID() << endl;

    return 0;
}
```

## Important Differences

| Feature | Regular Function | Static Function |
|---------|------------------|-----------------|
| **Calling** | Needs object | No object needed |
| **Access** | object.function() | Class::function() |
| **Sharing** | Each object has its copy | One shared for everyone |
| **Usage** | Object data | General operations |

## Important Rules

### 1. Static Functions Cannot Access Regular Members
```cpp
class clsExample
{
private:
    int _regularVar;
    static int _staticVar;

public:
    static void StaticFunction()
    {
        // _regularVar = 5;  // Error! Cannot access
        _staticVar = 10;     // Correct
    }
};
```

### 2. Can Be Called in Two Ways
```cpp
// From class directly
Class::StaticFunction();

// From object
object.StaticFunction();
```

## Magical Uses of Static Functions

As the professor mentioned, you'll find "magical" uses later

## Summary

**Static Functions** are:
- **Shared functions** for all objects
- Called at **Class** level, not **Object** level
- Can be called **before creating any object**
- Useful for general operations and utility functions

**Important Rules:**
- `ClassName::FunctionName()` to call from class
- Can also be called from objects
- Cannot access regular members

**Advice:** Use them for operations that don't need specific object data

*Anas Chetoui - `anaschetoui`*
